/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This gets separated out from misc module into a native module due to incompatibility between cpp-library and java-library plugins.
 * For details, please see https://github.com/gradle/gradle-native/issues/352#issuecomment-461724948
 */
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Module for native code'

apply plugin: 'cpp-library'

library {
    baseName = 'NativePosixUtil'

    // Native build for Windows platform will be added in later stage
    targetMachines = [
        machines.linux.x86_64,
        machines.macOS.x86_64
    ]
}

tasks.withType(CppCompile).configureEach {
    def javaHome = rootProject.ext.runtimeJava.getInstallationDirectory().getAsFile().getPath()

    systemIncludes.from file(javaHome + "/include")
    if (Os.isFamily(Os.FAMILY_MAC)) {
        systemIncludes.from file(javaHome + "/include/darwin")
    }
    else if(Os.isFamily(Os.FAMILY_UNIX)) {
        systemIncludes.from file(javaHome + "/include/linux")

        def solarisInclude = file(javaHome + "/include/solaris")
        if (solarisInclude.exists()) {
           systemIncludes.from solarisInclude
        }
    }

    compilerArgs.add '-fPIC'
}

tasks.withType(LinkSharedLibrary).configureEach {
    linkerArgs.add '-lstdc++'
}

