apply plugin: 'java-library'
apply plugin: "de.undercouch.download"

dependencies {
  testImplementation project(':lucene:codecs')
  testImplementation project(':lucene:test-framework')
}

// Some zip files to download and unpack

def jflexVersion = "jflex-1.7.0"
def jflexJar = "jflex-full-1.7.0.jar"
def momanZip = "5c5c2a1e4dea.zip"

ext.src = [
    'downloads': [
        "${jflexVersion}.zip": 'https://jflex.de/release',
        "$momanZip"          : 'https://bitbucket.org/jpbarrette/moman/get']
]

task downloadAndUnzipFiles {
  for (s in src.downloads) {
    download {
      src "$s.value/$s.key"
      dest buildDir
      onlyIfModified true
    }
    copy {
      from zipTree("$buildDir/$s.key")
      into buildDir
    }
  }
}

def python_exe = "python"
task createPackedIntSources {
  doLast {
    ['gen_BulkOperation.py', 'gen_Packed64SingleBlock.py'].each { prog ->
      exec {
        workingDir 'src/java/org/apache/lucene/util/packed'
        executable "${python_exe}"
        args = ['-B', prog]
      }
    }
    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'Packed64SingleBlock.java', encoding: 'UTF-8')
    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'BulkOperation*.java', encoding: 'UTF-8')
  }
}

// This is is somewhat fragile, the python script finds 'finenight' by having this line:
// sys.path.insert(0, '../../../../../../../build/jpbarrette-moman-5c5c2a1e4dea/finenight/python')
// If you change the version of moman you'll need to change the python script too. Why can't we pass
// this in?
task createLevAutomaton {
  [1, 2].each { edits ->
    [true, false].each { transpose ->
      exec {
        workingDir 'src/java/org/apache/lucene/util/automaton'
        executable "${python_exe}"
        args = ['-B', 'createLevAutomata.py', edits, transpose]
      }
    }
  }
  ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/automaton', includes: '*ParametricDescription.java', encoding: 'UTF-8')
}

task runJFlex(type: JavaExec) {
  classpath = files("${buildDir}/${jflexVersion}/lib/${jflexJar}")
  main = "jflex.Main"

  // arguments to pass to the application
  args = ['--skel', project.project(":lucene:core").projectDir.getAbsolutePath() + "/src/data/jflex/skeleton.disable.buffer.expansion.txt",
          '--nobak',
          'src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex'
  ]
  doLast {
    //Since the ZZ_BUFFERSIZE declaration is generated rather than in the skeleton, we have to transform it here.
    ant.replace(token: "private static final int ZZ_BUFFERSIZE", value: "private int ZZ_BUFFERSIZE", encoding: "UTF-8") {
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/standard", includes: "StandardTokenizerImpl.java")
    }
  }
}

task cleanJFlex {
  doLast {
    println "Cleaning JFlex"
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: file("src/java/org/apache/lucene/analysis/standard"), includes: "**/*.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
  }
}

task regenerate {
  group = 'Build Regenerate'
  description = "Regenerates various generated src files, automoton, packedints, jflex."
  dependsOn cleanJFlex, downloadAndUnzipFiles, createPackedIntSources, createLevAutomaton, runJFlex
}



