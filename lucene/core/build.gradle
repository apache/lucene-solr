apply plugin: 'java-library'
apply plugin: "de.undercouch.download"

dependencies {
  testImplementation project(':lucene:codecs')
  testImplementation project(':lucene:test-framework')
}

// Some zip files to download and unpack

def jflexVersion = 'jflex-1.7.0'
def jflexZip = "${jflexVersion}.zip"
def jflexFullJar = "jflex-full-1.7.0.jar"
def jflexUrl = "https://jflex.de/release/${jflexZip}"
def momanZip = '5c5c2a1e4dea.zip'
def momanUrl = "https://bitbucket.org/jpbarrette/moman/get/${momanZip}"


task downloadJavacc(type: Download) {
  src jflexUrl
  dest buildDir
  onlyIfModified true
}

task downloadMoman(type: Download) {
  src momanUrl
  dest buildDir
  onlyIfModified true
}

task downloadAndUnzipFiles(dependsOn: [downloadJavacc, downloadMoman]) {
  onlyIf { downloadJavacc.didWork || downloadMoman.didWork }
  doLast {
    [jflexZip, momanZip].each {
      def unzipFile = "$buildDir/$it"
      copy {
        from zipTree(unzipFile)
        into buildDir
      }
    }
  }
}

def python_exe = "python"
task createPackedIntSources(dependsOn: downloadAndUnzipFiles) {
  onlyIf { downloadJavacc.didWork || downloadMoman.didWork }

  doLast {
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: file("src/java/org/apache/lucene/util/packed"), includes: '**/*.java') {
        ant.containsregexp(expression: "This file has been automatically generated, DO NOT EDIT")
      }
    }

    ['gen_BulkOperation.py', 'gen_Packed64SingleBlock.py'].each { prog ->
      exec {
        workingDir 'src/java/org/apache/lucene/util/packed'
        executable "${python_exe}"
        args = ['-B', prog]
      }
    }
    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'Packed64SingleBlock.java', encoding: 'UTF-8')
    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'BulkOperation*.java', encoding: 'UTF-8')
  }
}

// This is is somewhat fragile, the python script finds 'finenight' by having this line:
// sys.path.insert(0, '../../../../../../../build/jpbarrette-moman-5c5c2a1e4dea/finenight/python')
// If you change the version of moman you'll need to change the python script too. Why can't we pass
// this in?
task createLevAutomaton(dependsOn: downloadAndUnzipFiles) {
  onlyIf { downloadJavacc.didWork || downloadMoman.didWork }
  doLast {
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: file('src/java/org/apache/lucene/util/automaton/'), includes: '*ParametricDescription.java')
    }

    [1, 2].each { edits ->
      ['True', 'False'].each { transpose ->
        println "EOE donig something $edits  $transpose"
        exec {
          workingDir 'src/java/org/apache/lucene/util/automaton'
          executable "${python_exe}"
          args = ['-B', 'createLevAutomata.py', edits, transpose]
        }
      }
    }
    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/automaton', includes: '*ParametricDescription.java', encoding: 'UTF-8')
  }
}

task runJFlex(dependsOn: downloadAndUnzipFiles) {
  onlyIf { downloadJavacc.didWork || downloadMoman.didWork }
  doLast {
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: file("src/java/org/apache/lucene/analysis/standard"), includes: '**/*.java') {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
    javaexec {
      classpath = files("${buildDir}/${jflexVersion}/lib/${jflexFullJar}")
      main = "jflex.Main"

      // arguments to pass to the application
      args = ['--skel', project.project(":lucene:core").projectDir.getAbsolutePath() + "/src/data/jflex/skeleton.disable.buffer.expansion.txt",
              '--nobak',
              'src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex'
      ]
    }
    //Since the ZZ_BUFFERSIZE declaration is generated rather than in the skeleton, we have to transform it here.
    ant.replace(token: "private static final int ZZ_BUFFERSIZE", value: "private int ZZ_BUFFERSIZE", encoding: "UTF-8") {
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/standard", includes: "StandardTokenizerImpl.java")
    }
  }
}


task regenerate() {
  group = 'Build Regenerate'
  description = "Regenerates various generated src files, automoton, packedints, jflex."
  dependsOn createPackedIntSources, createLevAutomaton, runJFlex
}



