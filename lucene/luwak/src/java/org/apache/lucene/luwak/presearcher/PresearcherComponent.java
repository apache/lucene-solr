/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.lucene.luwak.presearcher;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.LeafReader;
import org.apache.lucene.luwak.termextractor.QueryTerm;
import org.apache.lucene.luwak.termextractor.QueryTree;
import org.apache.lucene.luwak.termextractor.weights.TermWeightor;
import org.apache.lucene.search.Query;
import org.apache.lucene.util.BytesRef;

/**
 * Class that wraps a set of Presearcher behaviours
 */
public class PresearcherComponent {

  private final List<BiFunction<Query, TermWeightor, QueryTree>> builders;

  /**
   * Create a new PresearcherComponent from a list of QueryTreeBuilders
   *
   * @param builders the builders
   */
  public PresearcherComponent(List<BiFunction<Query, TermWeightor, QueryTree>> builders) {
    this.builders = builders;
  }

  public PresearcherComponent() {
    this.builders = Collections.emptyList();
  }

  /**
   * @return the QueryTreeBuilders for this component
   */
  public List<BiFunction<Query, TermWeightor, QueryTree>> getQueryTreeBuilders() {
    return builders;
  }

  /**
   * Filter the TokenStream used by the Presearcher to create it's document query
   *
   * @param field the field for this TokenStream
   * @param ts    a TokenStream generated by examining the presearcher's DocumentBatch
   * @return a filtered TokenStream
   */
  public TokenStream filterDocumentTokens(String field, TokenStream ts) {
    return ts;
  }

  /**
   * Add an extra token to the Document used to index a Query
   * <p>
   * For example, if one of the QueryTreeBuilders injects a CUSTOM QueryTerm.Type
   * into the query tree, and the relevant term is collected, you may want to add
   * a specific token here
   *
   * @param term the collected QueryTerm
   * @return a token to index, or null if no extra token is required
   */
  public BytesRef extraToken(QueryTerm term) {
    return null;
  }

  /**
   * Make changes to the presearcher query built from a DocumentBatch.  By default,
   * does nothing.
   *
   * @param reader           a LeafReader over the DocumentBatch index
   * @param presearcherQuery the input query built from the DocumentBatch
   * @return an adjusted query
   * @throws java.io.IOException on I/O errors
   */
  public Query adjustPresearcherQuery(LeafReader reader, Query presearcherQuery) throws IOException {
    return presearcherQuery;
  }

  /**
   * Make changes to the lucene Document that describes how a MonitorQuery will
   * be indexed by the presearcher.
   *
   * @param doc      the lucene Document
   * @param metadata MonitorQuery metadata
   */
  public void adjustQueryDocument(Document doc, Map<String, String> metadata) {

  }
}
