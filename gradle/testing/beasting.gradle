/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This adds 'beast' task which clones tests a given number of times (preferably
// constrained with a filtering pattern passed via '--tests').

// TODO: randomized seed is currently constant for all subtasks
// TODO: subtasks are not run in parallel (sigh, gradle removed this capability for intra-project tasks).
// TODO: maybe it would be better to take a deeper approach and just feed the task
//       runner duplicated suite names (much like https://github.com/gradle/test-retry-gradle-plugin)
// TODO: this is a somewhat related issue: https://github.com/gradle/test-retry-gradle-plugin/issues/29

allprojects {
  plugins.withType(JavaPlugin) {
    task beast(type: BeastTask) {
      description "Run a test suite (or a set of tests) many times over (duplicate 'test' task)."
      group "Verification"
    }

    if (gradle.startParameter.taskNames.contains("beast")) {
      def reps = Integer.parseInt(propertyOrDefault("reps", "0"))
      if (reps <= 0) {
        throw new GradleException("Specify -Preps=[count] for beast task.")
      }

      // generate N test tasks for beasting and attach them to the beasting task for this project.
      def subtasks = (1..reps).collect { value ->
        return tasks.create(name: "test_${value}", type: Test, {
          failFast = true
        })
      }

      beast.dependsOn subtasks
    }
  }
}

class BeastTask extends DefaultTask {
  @Option(option = "tests", description = "Sets test class or method name to be included, '*' is supported.")
  public void setTestNamePatterns(List<String> patterns) {
    taskDependencies.getDependencies(this).each { subtask -> 
      subtask.filter.setCommandLineIncludePatterns(patterns)
    }
  }

  @TaskAction
  void run() {
  }
}