/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.vladsch.flexmark.ast.Heading;
import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;
import com.vladsch.flexmark.ext.attributes.AttributesExtension;
import com.vladsch.flexmark.ext.autolink.AutolinkExtension;
import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.parser.ParserEmulationProfile;
import com.vladsch.flexmark.util.ast.Document;
import com.vladsch.flexmark.util.data.MutableDataSet;
import com.vladsch.flexmark.util.sequence.Escaping;

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "com.vladsch.flexmark:flexmark:${scriptDepVersions['flexmark']}"
    classpath "com.vladsch.flexmark:flexmark-ext-abbreviation:${scriptDepVersions['flexmark']}"
    classpath "com.vladsch.flexmark:flexmark-ext-attributes:${scriptDepVersions['flexmark']}"
    classpath "com.vladsch.flexmark:flexmark-ext-autolink:${scriptDepVersions['flexmark']}"
  }
}

def getListOfProjectsAsMarkdown = { prefix ->
  def projects = allprojects.findAll{ it.path.startsWith(prefix) && it.tasks.findByName('renderSiteJavadoc') }
    .sort(false, Comparator.comparing{ (it.name != 'core') as Boolean }
      .thenComparing(Comparator.comparing{ (it.name == 'test-framework') as Boolean })
      .thenComparing(Comparator.comparing{ it.path }));
  return projects.collect{ project ->
    def text = "**[${project.path.substring(prefix.length()).replace(':','-')}](${project.relativeDocPath}/index.html):** ${project.description}"
    if (project.name == 'core') {
      text = text.concat(' {style="font-size:larger; margin-bottom:.5em"}')
    }
    return '* ' + text;
  }.join('\n')
}

configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {
  task markdownToHtml(type: Copy) {
    filteringCharset = 'UTF-8'
    includeEmptyDirs = false
    into project.docroot
    rename(/\.md$/, '.html')
    filter(MarkdownFilter)
  }
}

configure(project(':lucene')) {
  markdownToHtml {
    from('.') {
      include 'MIGRATE.md'
      include 'JRE_VERSION_MIGRATION.md'
      include 'SYSTEM_REQUIREMENTS.md'
    }
  }
  
  task createDocumentationIndex {
    def outputFile = file("${project.docroot}/index.html");
    def defaultCodecFile = project(':lucene:core').file('src/java/org/apache/lucene/codecs/Codec.java')
    
    inputs.file(defaultCodecFile)
    outputs.file(outputFile)
    
    doLast {
      // static Codec defaultCodec   =   LOADER    .   lookup    (   "LuceneXXX"  )   ;
      def regex = ~/\bdefaultCodec\s*=\s*LOADER\s*\.\s*lookup\s*\(\s*"([^"]+)"\s*\)\s*;/
      def matcher = regex.matcher(defaultCodecFile.getText('UTF-8'))
      if (!matcher.find()) {
        throw GradleException("Cannot determine default codec from file ${defaultCodecFile}")
      }
      def defaultCodecPackage = matcher.group(1).toLowerCase(Locale.ROOT)
      def markdown = """
        ![Apache Lucene Logo](lucene_green_300.gif)
        
        # Apache Luceneâ„¢ ${project.version} Documentation

        Lucene is a Java full-text search engine. Lucene is not a complete application, 
        but rather a code library and API that can easily be used to add search capabilities
        to applications.
        
        This is the official documentation for **Apache Lucene ${project.version}**.
        Additional documentation is available in the
        [Wiki](https://cwiki.apache.org/confluence/display/lucene).
        
        ## Getting Started
        
        The following section is intended as a "getting started" guide. It has three
        audiences: first-time users looking to install Apache Lucene in their
        application; developers looking to modify or base the applications they develop
        on Lucene; and developers looking to become involved in and contribute to the
        development of Lucene. The goal is to help you "get started". It does not go into great depth
        on some of the conceptual or inner details of Lucene:
        
        * [Lucene demo, its usage, and sources](demo/overview-summary.html#overview.description):
          Tutorial and walk-through of the command-line Lucene demo.
        * [Introduction to Lucene's APIs](core/overview-summary.html#overview.description):
          High-level summary of the different Lucene packages. </li>
        * [Analysis overview](core/org/apache/lucene/analysis/package-summary.html#package.description):
          Introduction to Lucene's analysis API.  See also the
          [TokenStream consumer workflow](core/org/apache/lucene/analysis/TokenStream.html).
        
        ## Reference Documents
        
        * [Changes](changes/Changes.html): List of changes in this release.
        * [System Requirements](SYSTEM_REQUIREMENTS.html): Minimum and supported Java versions.
        * [Migration Guide](MIGRATE.html): What changed in Lucene 8; how to migrate code from Lucene 7.x.
        * [JRE Version Migration](JRE_VERSION_MIGRATION.html): Information about upgrading between major JRE versions.
        * [File Formats](core/org/apache/lucene/codecs/${defaultCodecPackage}/package-summary.html#package.description):
          Guide to the supported index format used by Lucene. This can be customized by using
          [an alternate codec](core/org/apache/lucene/codecs/package-summary.html#package.description).
        * [Search and Scoring in Lucene](core/org/apache/lucene/search/package-summary.html#package.description):
          Introduction to how Lucene scores documents.
        * [Classic Scoring Formula](core/org/apache/lucene/search/similarities/TFIDFSimilarity.html):
          Formula of Lucene's classic [Vector Space](http://en.wikipedia.org/wiki/Vector_Space_Model) implementation
          (look [here](core/org/apache/lucene/search/similarities/package-summary.html#package.description) for other models).
        * [Classic QueryParser Syntax](queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description):
          Overview of the Classic QueryParser's syntax and features.
        
        ## API Javadocs
        
      """.stripIndent().concat(getListOfProjectsAsMarkdown(':lucene:'))
      project.docroot.mkdirs();
      outputFile.write(MarkdownFilter.convert(markdown), 'UTF-8')
    }
  }
}

configure(project(':solr')) {
  markdownToHtml {
    from('site') {
      include '**/*.md'
    }
  }
  
  task createDocumentationIndex {
    // nocommit: this needs to be implemented next
  }
}

class MarkdownFilter extends FilterReader {
  public MarkdownFilter(Reader reader) throws IOException {
    // this is not really a filter: it reads whole file in ctor,
    // converts it and provides result downstream as a StringReader
    super(new StringReader(convert(reader.text)));
  }

  public static String convert(String markdownSource) {
    // first replace LUCENE and SOLR issue numbers with a markdown link
    markdownSource = markdownSource.replaceAll(/(?s)\b(LUCENE|SOLR)\-\d+\b/,
      '[$0](https://issues.apache.org/jira/browse/$0)');
  
    // convert the markdown
    MutableDataSet options = new MutableDataSet();
    options.setFrom(ParserEmulationProfile.MARKDOWN);
    options.set(Parser.EXTENSIONS, [ AbbreviationExtension.create(), AutolinkExtension.create(), AttributesExtension.create() ]);
    options.set(HtmlRenderer.RENDER_HEADER_ID, true);
    options.set(HtmlRenderer.MAX_TRAILING_BLANK_LINES, 0);
    Document parsed = Parser.builder(options).build().parse(markdownSource);

    StringBuilder html = new StringBuilder('<html>\n<head>\n');
    CharSequence title = parsed.getFirstChildAny(Heading.class)?.getText();          
    if (title != null) {
      html.append('<title>').append(Escaping.escapeHtml(title, false)).append('</title>\n');
    }
    html.append('<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n')
      .append('</head>\n<body>\n');
    HtmlRenderer.builder(options).build().render(parsed, html);
    html.append('</body>\n</html>\n');
    return html;
  }
}

