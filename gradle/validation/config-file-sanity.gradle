/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// An equivalent of ant's "check-example-lucene-match-version"

configure(project(":solr")) {
  task validateConfigFileSanity() {
    doFirst {
      def matchVersion = project(":solr:core").resolvedTestOption('tests.luceneMatchVersion')
      if (!matchVersion) {
        throw new GradleException("tests.luceneMatchVersion not defined?")
      }

      // Verify solrconfig.xml files declare proper luceneMatchVersion.
      [
          file("server/solr/configsets"),
          file("example")
      ].each { configsetsDir ->
        def configFiles = fileTree(configsetsDir, {
          include "**/solrconfig.xml"
        })

        configFiles.each { file ->
          def content = file.getText("UTF-8")
          if (!content.contains("<luceneMatchVersion>${matchVersion}<")) {
            throw new GradleException("Configset does not refer to the correct luceneMatchVersion (${matchVersion}): ${file.absolutePath}")
          }
        }
      }

      def configsetsDir = file("server/solr/configsets")
      def subdirs = configsetsDir.listFiles({file -> file.isDirectory() } as FileFilter)

      if (subdirs.size() == 0) {
        throw new GradleException("No sub-directories found under ${configsetsDir}?")
      }

      subdirs.each { dir ->
        if (fileTree(dir, { include "**/solrconfig.xml" }).asList().isEmpty()) {
          throw new GradleException("No solrconfig.xml file under: ${dir}")
        }
      }
    }
  }
}
