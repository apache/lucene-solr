/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files

// This adds top-level 'documentation-lint' task.

// Change the log level for the STDOUT to INFO (default is QUIET)
// so that lint scripts' output will be printed without --debug option
logging.captureStandardOutput LogLevel.INFO

configure(rootProject) {

  configurations {
    ecj
  }

  dependencies {
    ecj 'org.eclipse.jdt:ecj:3.19.0'
  }

  // the main task
  task('documentationLint') {
    group 'Verification'
    description 'Runs documentation linters.'

    dependsOn ':checkBrokenLinks'
    dependsOn subprojects.collect { prj ->
      prj.tasks.matching { task ->
        task.name in [
          'ecjLint',
          'checkMissingJavadocs'
        ]
      }
    }
  }

  task('checkBrokenLinks', type: CheckBrokenJavadocsLinksTask) {
    dependsOn subprojects.collect { prj ->
      prj.tasks.matching { task ->
        task.name == 'javadoc'
      }
    }
  }
}

allprojects { prj ->
  task('ecjLint', type: EcjLintTask)
  task('checkMissingJavadocs', type: CheckMissingJavadocsTask) {
    plugins.withId('java', {
      dependsOn 'javadoc'
    })
  }
}

// todo: add missing docs for all classes and bump this to level=class
def packageLevelCheckProjects = allprojects.findAll { it.path.startsWith(':solr') && it.plugins.contains(JavaPlugin) }
configure(packageLevelCheckProjects) { prj ->
  checkMissingJavadocs {
    dirs += [new Tuple2("${buildDir}/docs/javadoc", "package")]
  }
}

// too many classes to fix overall to just enable the above to be level="method" right now,
// but we can prevent the modules that don't have problems from getting any worse
def methodLevelCheckProjects = [
  project(':lucene:analysis:icu'),
  project(':lucene:analysis:morfologik'),
  project(':lucene:analysis:phonetic'),
  project(':lucene:analysis:stempel'),
  project(':lucene:classification'),
  project(':lucene:demo'),
  project(':lucene:expressions'),
  project(':lucene:facet'),
  project(':lucene:join'),
  project(':lucene:memory'),
  project(':lucene:suggest'),
  project(':lucene:spatial3d')
]

def prjLuceneCore = project(':lucene:core')
def classLevelCheckProjects = allprojects.findAll { it.path.startsWith(':lucene') && it.plugins.contains(JavaPlugin) } - methodLevelCheckProjects - [ prjLuceneCore ]

configure(classLevelCheckProjects) {
  checkMissingJavadocs {
    dirs += [ new Tuple2("${buildDir}/docs/javadoc", "class") ]
  }
}

configure(methodLevelCheckProjects) {
  checkMissingJavadocs {
    dirs += [ new Tuple2("${buildDir}/docs/javadoc", "method") ]
  }
}

// too much to fix core/ for now, but enforce full javadocs for key packages
configure(prjLuceneCore) {
  checkMissingJavadocs {
    dirs += [
      new Tuple2("${buildDir}/docs/javadoc", "class"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/util/automaton", "method"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/analysis", "method"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/document", "method"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/search/similarities", "method"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/index", "method"),
      new Tuple2("${buildDir}/docs/javadoc/org/apache/lucene/codecs", "method"),
    ]
  }
}

class EcjLintTask extends DefaultTask {

  def ecjJavadocLint(String dstDir) {
    project.plugins.withId('java', {
      project.sourceSets.each { sourceSet ->
        project.javaexec {
          classpath {
            project.rootProject.configurations.ecj.asPath
          }
          main = "org.eclipse.jdt.internal.compiler.batch.Main"
          args += [
            // Unfortunately, 'testCompileClasspath' is not available from sourceSet, so without the second term test classes cannot be compiled.
            "-classpath", sourceSet.compileClasspath.toList().join(':') + project.configurations.testCompileClasspath.findAll().join(":"),
            "-d", dstDir,
            "-encoding", "UTF-8",
            "-source", "11", // FIXME: How this can be obtained from sourceSet or project?
            "-target", "11",
            "-nowarn",
            "-enableJavadoc",
            "-properties", "${project.rootProject.rootDir}/lucene/tools/javadoc/ecj.javadocs.prefs",
            // FIXME: How this can be obtained from sourceSet or project?
            "src/java" // ... or "src/test".
          ]
        }
      }
    })
  }

  @TaskAction
  def lint() {
    def dstDir = Files.createTempDirectory("ecj")
    try {
      // TODO: should output Compiler WARNING (the same as ant's ECJ macro)?
      ecjJavadocLint(dstDir.toString())
    } finally {
      dstDir.deleteDir()
    }
  }

}

class CheckBrokenJavadocsLinksTask extends DefaultTask {

  // collect all built Javadocs to temp dir for linting
  def copyAllJavadocs(String tmpJavadocDir) {
    project.allprojects.each { prj ->
      prj.plugins.withId('java', {
        prj.copy {
          from("${prj.buildDir}/docs/javadoc") {
            include '**/*.html'
            include '**/*.js'
            include '**/*.css'
            includeEmptyDirs false
          }
          into "${tmpJavadocDir}/${prj.path.replace(':', '/')}"  // FIXME: this doesn't work for analyzers-xxx modules...
        }
      })
    }
  }

  def checkBrokenJavadocLinks(dir) {
    project.exec {
      executable "python3"
      args = [
        "-B",
        "${project.rootProject.rootDir}/dev-tools/scripts/checkJavadocLinks.py",
        dir
      ]
    }
  }

  @TaskAction
  def lint() {
    def tmpJavadocDir = Files.createTempDirectory("javadoc")
    try {
      copyAllJavadocs(tmpJavadocDir.toString())
      println("Checking for broken links...")
      checkBrokenJavadocLinks("${tmpJavadocDir.toString()}/lucene")
      checkBrokenJavadocLinks("${tmpJavadocDir.toString()}/solr")
    } finally {
      tmpJavadocDir.deleteDir()
    }
  }
}

class CheckMissingJavadocsTask extends DefaultTask {

  // list of (directory_to_be_checked, level)
  @Input
  List<Tuple2<String, String>> dirs = [];

  def checkMissingJavadocs(String dir, String level) {
    project.exec {
      executable "python3"
      args = [
        "-B",
        "${project.rootProject.rootDir}/dev-tools/scripts/checkJavaDocs.py",
        dir,
        level
      ]
    }
  }

  @TaskAction
  def lint() {
    if (dirs != null && dirs.size() > 0) {
      for (tup in dirs) {
        println("Checking for missing docs... (dir=${tup.first}, level=${tup.second})")
        checkMissingJavadocs(tup.first, tup.second)
      }
    }
  }
}

