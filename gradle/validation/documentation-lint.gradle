/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files

// This adds top-level 'documentation-lint' task.

def includes = allprojects.findAll { it.file('src/java').exists() }
def tmpJavadocDir = Files.createTempDirectory("javadoc")

// Change the log level for the STDOUT to INFO (default is QUIET)
// so that lint scripts' output will be printed without --debug option
logging.captureStandardOutput LogLevel.INFO

configure(rootProject) {

  configurations {
    ecj
  }
  dependencies {
    ecj 'org.eclipse.jdt:ecj:3.19.0'
  }

  task("documentationLint") {
    group "Verification"
    description "Runs documentation linters."

    dependsOn ':checkBrokenLinks'
    dependsOn includes.collect { prj ->
      prj.tasks.matching { task ->
        task.name in [
          'ecjJavadocLint',
          'checkMissingJavadocsClass',
          'checkMissingJavadocsMethod'
        ]
      }
    }
  }

  task("checkBrokenLinks", type: Exec) {
    (includes).each {
      dependsOn "${it.path}:copyBuiltJavadocs"
    }

    executable "python3"
    args "-B", "${rootDir}/dev-tools/scripts/checkJavadocLinks.py", tmpJavadocDir
  }

  task ("cleanUpJavadocDir", type: Delete) {
    delete tmpJavadocDir
  }

  checkBrokenLinks.finalizedBy cleanUpJavadocDir

}

configure(includes) { prj ->
  plugins.withType(JavaPlugin) {
    task("ecjJavadocLint", type: EcjJavadocLintTask) {
      dependsOn ':build'
    }

    // copy Javadocs to temporary directory for the task 'checkBrokenLinks'
    task ("copyBuiltJavadocs", type: Copy, dependsOn: 'javadoc') {
      from('build/docs/javadoc') {
        include '**/*.html'
        include '**/*.js'
        include '**/*.css'
        includeEmptyDirs false
      }
      into "${tmpJavadocDir}/${project.path.replace(':', '/')}"
    }

    task ("checkMissingJavadocsClass", type: Exec, dependsOn: 'javadoc') {
      executable "python3"
      args "-B", "${project.rootProject.rootDir}/dev-tools/scripts/checkJavaDocs.py", "${buildDir}/docs/javadoc", "class"
    }

    task ("checkMissingJavadocsMethod", type: Exec, dependsOn: 'javadoc') {
      executable "python3"
      args "-B", "${project.rootProject.rootDir}/dev-tools/scripts/checkJavaDocs.py", "${buildDir}/docs/javadoc", "method"
    }

  }
}



class EcjJavadocLintTask extends DefaultTask {

  @Input
  String srcMainDir = "src/java"

  @Input
  String srcTestDir = "src/test"

  def ecjJavadocLint(String srcDir, String dstDir, String cp) {
    project.javaexec {
      classpath {
        project.rootProject.configurations.ecj.asPath
      }
      main = "org.eclipse.jdt.internal.compiler.batch.Main"
      args += [
        "-classpath", cp,
        "-d", dstDir,
        "-encoding", "UTF-8",
        "-source", "11",
        "-target", "11",
        "-nowarn",
        "-enableJavadoc",
        "-properties", "${project.rootProject.rootDir}/lucene/tools/javadoc/ecj.javadocs.prefs",
        srcDir
      ]
    }
  }

  @TaskAction
  def lint() {
    def dstDir = Files.createTempDirectory("ecj")
    def cp = project.configurations.compileClasspath.findAll().join(":")
    // add dstDir to test classpath because 'testCompileClasspath' doesn't include main classes in 'src/java'
    def testcp = project.configurations.testCompileClasspath.findAll().join(":") + ":" + dstDir
    try {
      // TODO: should output Compiler WARNING (the same as ant's ECJ macro)?
      ecjJavadocLint(srcMainDir, dstDir.toString(), cp)
      ecjJavadocLint(srcTestDir, dstDir.toString(), testcp)
    } finally {
      dstDir.deleteDir()
    }
  }
}


