/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */
package org.apache.solr.aqp;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _ESCAPED_CHAR = 1;
  /** RegularExpression Id. */
  int _WHITESPACE = 2;
  /** RegularExpression Id. */
  int _TERM_START_CHAR = 3;
  /** RegularExpression Id. */
  int _TERM_END_CHAR = 4;
  /** RegularExpression Id. */
  int _TERM_CHAR = 5;
  /** RegularExpression Id. */
  int _QUOTED_CHAR = 6;
  /** RegularExpression Id. */
  int _SQUOTED_CHAR = 7;
  /** RegularExpression Id. */
  int _DISTOP = 8;
  /** RegularExpression Id. */
  int _DISTOP_NUM = 9;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int OR = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int MUST = 15;
  /** RegularExpression Id. */
  int SHOULD = 16;
  /** RegularExpression Id. */
  int W = 17;
  /** RegularExpression Id. */
  int N = 18;
  /** RegularExpression Id. */
  int BAREOPER = 19;
  /** RegularExpression Id. */
  int LPAREN = 20;
  /** RegularExpression Id. */
  int RPAREN = 21;
  /** RegularExpression Id. */
  int COLON = 22;
  /** RegularExpression Id. */
  int STAR = 23;
  /** RegularExpression Id. */
  int QUOTED = 24;
  /** RegularExpression Id. */
  int SINGLE_QUOTED = 25;
  /** RegularExpression Id. */
  int TERM = 26;
  /** RegularExpression Id. */
  int PREFIXTERM = 27;
  /** RegularExpression Id. */
  int WILDTERM = 28;
  /** RegularExpression Id. */
  int REGEXPTERM = 29;
  /** RegularExpression Id. */
  int RANGEIN_START = 30;
  /** RegularExpression Id. */
  int RANGEEX_START = 31;
  /** RegularExpression Id. */
  int RANGE_TO = 32;
  /** RegularExpression Id. */
  int RANGEIN_END = 33;
  /** RegularExpression Id. */
  int RANGEEX_END = 34;
  /** RegularExpression Id. */
  int RANGE_QUOTED = 35;
  /** RegularExpression Id. */
  int RANGE_GOOP = 36;

  /** Lexical state. */
  int Range = 0;
  /** Lexical state. */
  int Near = 1;
  /** Lexical state. */
  int Within = 2;
  /** Lexical state. */
  int DEFAULT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<_ESCAPED_CHAR>",
    "<_WHITESPACE>",
    "<_TERM_START_CHAR>",
    "<_TERM_END_CHAR>",
    "<_TERM_CHAR>",
    "<_QUOTED_CHAR>",
    "<_SQUOTED_CHAR>",
    "<_DISTOP>",
    "<_DISTOP_NUM>",
    "<token of kind 10>",
    "<token of kind 11>",
    "<AND>",
    "<OR>",
    "\"!\"",
    "\"+\"",
    "\"~\"",
    "<W>",
    "<N>",
    "<BAREOPER>",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"*\"",
    "<QUOTED>",
    "<SINGLE_QUOTED>",
    "<TERM>",
    "<PREFIXTERM>",
    "<WILDTERM>",
    "<REGEXPTERM>",
    "\"[\"",
    "\"{\"",
    "\"TO\"",
    "\"]\"",
    "\"}\"",
    "<RANGE_QUOTED>",
    "<RANGE_GOOP>",
  };

}
