<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="test" version="1.2">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       Applications should change this to reflect the nature of the search collection.
       version="1.1" is Solr's version number for the schema syntax and semantics.  It should
       not normally be changed by applications.
       1.0: multiValued attribute did not exist, all fields are multiValued by nature
       1.1: multiValued attribute introduced, false by default -->


  <!-- field type definitions. The "name" attribute is
     just a label to be used by field definitions.  The "class"
     attribute and any other attributes determine the real
     behavior of the fieldType.
       Class names starting with "solr" refer to java classes in the
     org.apache.solr.analysis package.
  -->

  <!-- The StrField type is not analyzed, but indexed/stored verbatim.  
     - StrField and TextField support an optional compressThreshold which
     limits compression (if enabled in the derived fields) to values which
     exceed a certain size (in characters).
  -->
  <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

  <!-- The optional sortMissingLast and sortMissingFirst attributes are
       currently supported on types that are sorted internally as strings.
     - If sortMissingLast="true", then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
     - If sortMissingFirst="true", then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
     - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the
       field first in an ascending sort and last in a descending sort.
  -->


  <!--
    Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
  -->
  <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="latLon" class="solr.LatLonType" subFieldType="double"/>


  <!--
   Numeric field types that index each value at various levels of precision
   to accelerate range queries when the number of values between the range
   endpoints is large. See the javadoc for NumericRangeQuery for internal
   implementation details.

   Smaller precisionStep values (specified in bits) will lead to more tokens
   indexed per value, slightly larger index size, and faster range queries.
   A precisionStep of 0 disables indexing at different precision levels.
  -->
  <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>


  <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
       is a more restricted form of the canonical representation of dateTime
       http://www.w3.org/TR/xmlschema-2/#dateTime    
       The trailing "Z" designates UTC time and is mandatory.
       Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
       All other components are mandatory.

       Expressions can also be used to denote calculations that should be
       performed relative to "NOW" to determine the value, ie...

             NOW/HOUR
                ... Round to the start of the current hour
             NOW-1DAY
                ... Exactly 1 day prior to now
             NOW/DAY+6MONTHS+3DAYS
                ... 6 months and 3 days in the future from the start of
                    the current day
                    
       Consult the TrieDateField javadocs for more information.
    -->
  <fieldType name="date" class="solr.TrieDateField" sortMissingLast="true" omitNorms="true"/>


  <!-- The "RandomSortField" is not used to store or search any
       data.  You can declare fields of this type it in your schema
       to generate psuedo-random orderings of your docs for sorting 
       purposes.  The ordering is generated based on the field name 
       and the version of the index, As long as the index version
       remains unchanged, and the same field name is reused,
       the ordering of the docs will be consistent.  
       If you want differend psuedo-random orderings of documents,
       for the same version of the index, use a dynamicField and
       change the name
   -->
  <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

  <!-- solr.TextField allows the specification of custom text analyzers
       specified as a tokenizer and a list of token filters. Different
       analyzers may be specified for indexing and querying.

       The optional positionIncrementGap puts space between multiple fields of
       this type on the same document, with the purpose of preventing false phrase
       matching across fields.

       For more info on customizing your analyzer chain, please see
       http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
   -->

  <!-- One can also specify an existing Analyzer class that has a
       default constructor via the class attribute on the analyzer element
  <fieldType name="text_greek" class="solr.TextField">
    <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
  </fieldType>
  -->

  <!-- A text field that only splits on whitespace for exact matching of words -->
  <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.MockTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <!-- A text field that uses WordDelimiterGraphFilter to enable splitting and matching of
      words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
      so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
      Synonyms and stopwords are customized by external files, and stemming is enabled.
      Duplicate tokens at the same position (which may result from Stemmed Synonyms or
      WordDelim parts) are removed.
      -->
  <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.MockTokenizerFactory"/>
      <!-- in this example, we will only use synonyms at query time
      <filter class="solr.SynonymGraphFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      -->
      <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>-->
      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1"
              catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>-->
      <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      <filter class="solr.FlattenGraphFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.MockTokenizerFactory"/>
      <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
      <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>-->
      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0"
              catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>-->
      <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
    </analyzer>
  </fieldType>
  <!-- since fields of this type are by default not stored or indexed, any data added to 
       them will be ignored outright 
   -->
  <fieldType name="ignored" stored="false" indexed="false" class="solr.StrField"/>

  <field name="title" type="string" indexed="true" stored="true"/>
  <field name="author" type="string" indexed="true" stored="true"/>
  <field name="text" type="text" indexed="true" stored="true"/>
  <field name="foo_i" type="int" indexed="true" stored="false"/>
  <field name="home" type="latLon" indexed="true" stored="true"/>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>text</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>

</schema>
