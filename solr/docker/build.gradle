/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'base'
apply plugin: 'com.palantir.docker'

subprojects {
  apply plugin: 'base'
  apply plugin: 'com.palantir.docker'
}

description = 'Solr Docker image'

def dockerPackage = project(':solr:docker:package')

dependencies {
  docker dockerPackage
}

def dockerImageRepo = propertyOrEnvOrDefault("solr.docker.imageRepo", "SOLR_DOCKER_IMAGE_REPO", "apache/solr")
def dockerImageTag = propertyOrEnvOrDefault("solr.docker.imageTag", "SOLR_DOCKER_IMAGE_TAG", "${version}")
def dockerImageName = propertyOrEnvOrDefault("solr.docker.imageName", "SOLR_DOCKER_IMAGE_NAME", "${dockerImageRepo}:${dockerImageTag}")
def baseDockerImage = propertyOrEnvOrDefault("solr.docker.baseImage", "SOLR_DOCKER_BASE_IMAGE", 'openjdk:11-jre-slim')
def githubUrlOrMirror = propertyOrEnvOrDefault("solr.docker.githubUrl", "SOLR_DOCKER_GITHUB_URL", 'github.com')

docker {
  name = dockerImageName
  files file('include')
  buildArgs(['BASE_IMAGE' : baseDockerImage,
             'SOLR_PACKAGE_IMAGE' : 'apache/solr-build:local-package',
             'SOLR_VERSION': "${version}",
             'GITHUB_URL': githubUrlOrMirror])
}

tasks.docker {
  // In order to create the solr docker image, the solr package image must be created first.
  dependsOn dockerPackage.tasks.docker

  inputs.file('Dockerfile') // https://github.com/palantir/gradle-docker/issues/413

  // Print information on the image after it has been created
  doLast {
    project.logger.lifecycle("Solr Docker Image Created")
    project.logger.lifecycle("\tName: $dockerImageName")
    project.logger.lifecycle("\tBase Image: $baseDockerImage")
  }
}

task testDocker {
  group 'verification'
  dependsOn 'docker'

  def testFiles = fileTree("tests/cases")
  inputs.files(testFiles).skipWhenEmpty()

  def solrImageName = dockerImageName
  inputs.property('solrImageName', dockerImageName)

  def outputDir = "$buildDir/tmp/tests"
  outputs.dir(outputDir)

  doLast {
    // Print information on the image before it is tested
    logger.lifecycle("Testing Solr Image: $solrImageName\n")
    testFiles.files.stream().filter{it.name.equals("test.sh")}.forEach {testFile ->
      def testName = testFile.parentFile.name
      project.exec {
        environment "TEST_DIR", testFile.parent
        environment "BUILD_DIR", "$outputDir/$testName"
        commandLine "bash", testFile, solrImageName
      }
    }
  }
}