/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.google.common.base.Preconditions
import com.google.common.base.Strings

description = 'Solr Docker image'

apply plugin: 'base'

def dockerImageRepo = propertyOrEnvOrDefault("solr.docker.imageRepo", "SOLR_DOCKER_IMAGE_REPO", "apache/solr")
def dockerImageTag = propertyOrEnvOrDefault("solr.docker.imageTag", "SOLR_DOCKER_IMAGE_TAG", "${version}")
def dockerImageName = propertyOrEnvOrDefault("solr.docker.imageName", "SOLR_DOCKER_IMAGE_NAME", "${dockerImageRepo}:${dockerImageTag}")
def baseDockerImage = propertyOrEnvOrDefault("solr.docker.baseImage", "SOLR_DOCKER_BASE_IMAGE", 'openjdk:11-jre-slim')
def githubUrlOrMirror = propertyOrEnvOrDefault("solr.docker.githubUrl", "SOLR_DOCKER_GITHUB_URL", 'github.com')

configurations {
  packageDockerImage {
    canBeResolved = true
  }
  dockerImage {
    canBeResolved = true
  }
}

dependencies {
  packageDockerImage project(path: ":solr:docker:package", configuration: 'packageDockerImage')

  dockerImage files("$buildDir/image-id") {
    builtBy 'dockerBuild'
  }
}

task dockerTar(type: Tar) {
  group = 'Docker'
  description = 'Package docker context to prepare for docker build'

  into('scripts') {
    from file('scripts')
    fileMode 755
  }
  from file('Dockerfile')
  destinationDirectory = file('build/distributions')
  extension 'tgz'
  compression = Compression.GZIP
}

task dockerBuild(dependsOn: [tasks.dockerTar, configurations.packageDockerImage]) {
  group = 'Docker'
  description = 'Build Solr docker image'

  def imageIdFile = "$buildDir/image-id"

  doLast {
    exec {
      standardInput = tasks.dockerTar.outputs.files.singleFile.newDataInputStream()
      commandLine "docker", "build",
              "--iidfile", imageIdFile,
              "--build-arg", "BASE_IMAGE=${baseDockerImage}",
              "--build-arg", "SOLR_PACKAGE_IMAGE=${configurations.packageDockerImage.singleFile.text}",
              "--build-arg", "SOLR_VERSION=${version}",
              "--build-arg", "GITHUB_URL=${githubUrlOrMirror}",
              "-"
    }
  }

  outputs.files(imageIdFile)
}

artifacts {
  dockerImage(tasks.dockerBuild.outputs.files.singleFile) {
    builtBy(tasks.dockerBuild)
  }
}

task dockerTag(dependsOn: tasks.dockerBuild) {
  group = 'Docker'
  description = 'Tag Solr docker image'

  doLast {
    exec {
      commandLine "docker", "tag", tasks.dockerBuild.outputs.files.singleFile.text, dockerImageName
    }
  }

  // Print information on the image after it has been created
  doLast {
    project.logger.lifecycle("Solr Docker Image Created")
    project.logger.lifecycle("\tTag: $dockerImageName")
    project.logger.lifecycle("\tBase Image: $baseDockerImage")
  }
}

task dockerPush(dependsOn: tasks.dockerTag) {
  group = 'Docker'
  description = 'Push Solr docker image'

  doLast {
    exec {
      commandLine "docker", "push", dockerImageName
    }
  }

  // Print information on the image after it has been created
  doLast {
    project.logger.lifecycle("Solr Docker Image Pushed: $dockerImageName")
  }
}

abstract class DockerTestSuite extends DefaultTask {
  private String solrImageName = null;
  private List<String> tests = new ArrayList<>();
  private List<String> ignore = new ArrayList<>();

  @OutputDirectory
  abstract DirectoryProperty getOutputDir()

  public void setSolrImageName(String solrImageName) {
    this.solrImageName = solrImageName
  }

  public String getSolrImageName() {
    Preconditions.checkArgument(!Strings.isNullOrEmpty(solrImageName), "solrImageName is a required dockerTests configuration item.")
    return solrImageName
  }

  @Option(option = "tests", description = "Only run these specified tests, comma separated.")
  public void setTests(List<String> tests) {
    this.tests = tests;
  }

  @Input
  public List<String> getTests() {
    return tests;
  }

  @Option(option = "ignore", description = "Ignore these tests, comma separated.")
  public void setIgnore(List<String> ignore) {
    this.ignore = ignore;
  }

  @Input
  public List<String> getIgnore() {
    return ignore;
  }

  @TaskAction
  void execute() {
  }
}

task testDocker(dependsOn: tasks.dockerBuild) {
  doLast {
    def solrImageName = tasks.dockerBuild.outputs.files.singleFile.text

    def includeTests = new HashSet(Arrays.asList(propertyOrEnvOrDefault("tests", "SOLR_DOCKER_TESTS", ",").split(",")))
    def ignoreTests = new HashSet(Arrays.asList(propertyOrEnvOrDefault("ignore", "SOLR_DOCKER_TESTS_INGORE", ",").split(",")))
    logger.lifecycle(includeTests.toString())
    logger.lifecycle(ignoreTests.toString())

    def outputDir = file("$buildDir/tmp/tests")
    // Print information on the image before it is tested
    logger.lifecycle("Testing Solr Image: $solrImageName\n")
    def sourceDir = file("tests/cases")
    sourceDir.eachFile  { file ->
      def testName = file.getName()
      def testCaseBuildDir = "${outputDir.path}/${testName}"

      // If specific tests are specified, only run those. Otherwise run all that are not ignored.
      def runTest = !includeTests.isEmpty() ? includeTests.contains(testName) : !ignoreTests.contains(testName)
      if (runTest) {
        exec {
          environment "TEST_DIR", file
          environment "BUILD_DIR", testCaseBuildDir
          commandLine "bash", "$file/test.sh", solrImageName
        }
      }
    }
  }
}